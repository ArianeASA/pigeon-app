# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop", "master" ]
  release:
    types: [ published ]
permissions:
  contents: read
  issues: write

jobs:

  go-build:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Test
      run: go test -v ./...
    
    - name: Build
      run: GOARCH=amd64 CGO_ENABLED=0 GOOS=linux go build -tags lambda.norpc -o bootstrap main.go

#    - name: GLIBC -erro na versao disso
#      run: ldd -v main

#    local precisa zipar
#    - name: Zip
#      run: zip ./main.zip main

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: ./bootstrap

  deploy-aws:
    needs: go-build
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init -var 'aws_region=${{ secrets.AWS_REGION }}' -var 'account_id=${{ secrets.ACCOUNT_ID }}' -var 'bucket_main_id=${{ secrets.BUCKET_MAIN_ID }}' -var 'smtp_host=${{ secrets.SMTP_HOST }}' -var 'smtp_port=${{ secrets.SMTP_PORT }}' -var 'smtp_user=${{ secrets.SMTP_USER }}' -var 'smtp_pass=${{ secrets.SMTP_PASS }}' -var 'head_metadata=${{ secrets.HEAD_METADATA }}'
      working-directory: deployments

    - name: Terraform Validate
      run: terraform validate
      working-directory: deployments

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
       name: my-artifact

    - name: Terraform Plan
      if: ${{ github.event_name == 'pull_request' || github.ref == 'refs/heads/master' }}
      run: terraform plan -var 'aws_region=${{ secrets.AWS_REGION }}' -var 'account_id=${{ secrets.ACCOUNT_ID }}' -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -var 'bucket_main_id=${{ secrets.BUCKET_MAIN_ID }}' -var 'smtp_host=${{ secrets.SMTP_HOST }}' -var 'smtp_port=${{ secrets.SMTP_PORT }}' -var 'smtp_user=${{ secrets.SMTP_USER }}' -var 'smtp_pass=${{ secrets.SMTP_PASS }}' -var 'head_metadata=${{ secrets.HEAD_METADATA }}'
      working-directory: deployments

    - uses: trstringer/manual-approval@v1
      if: ${{ github.ref == 'refs/heads/master' }}
      id: approval
      with:
        secret: ${{ github.TOKEN }}
        approvers: ArianeASA
        minimum-approvals: 1
        issue-title: "Deploying v1.0.0 to prod"
        issue-body: "Review the terraform plan, then approve or deny the deployment of v1.0.0 to prod."
        exclude-workflow-initiator-as-approver: false
#      continue-on-error: true

    - name: Terraform Apply
      if: ${{ github.ref == 'refs/heads/master' && steps.approval.conclusion == 'success' }}
      id: apply
      run: terraform apply -auto-approve -var 'aws_region=${{ secrets.AWS_REGION }}' -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -var 'account_id=${{ secrets.ACCOUNT_ID }}' -var 'bucket_main_id=${{ secrets.BUCKET_MAIN_ID }}' -var 'smtp_host=${{ secrets.SMTP_HOST }}' -var 'smtp_port=${{ secrets.SMTP_PORT }}' -var 'smtp_user=${{ secrets.SMTP_USER }}' -var 'smtp_pass=${{ secrets.SMTP_PASS }}' -var 'head_metadata=${{ secrets.HEAD_METADATA }}'
      working-directory: deployments

    - name: Cleanup if apply fails
      if: ${{github.ref == 'refs/heads/master' && steps.apply.conclusion != 'success' }}
      run: terraform destroy -auto-approve -var 'aws_region=${{ secrets.AWS_REGION }}' -var 'access_key=${{ secrets.AWS_ACCESS_KEY_ID }}' -var 'secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -var 'account_id=${{ secrets.ACCOUNT_ID }}' -var 'bucket_main_id=${{ secrets.BUCKET_MAIN_ID }}' -var 'smtp_host=${{ secrets.SMTP_HOST }}' -var 'smtp_port=${{ secrets.SMTP_PORT }}' -var 'smtp_user=${{ secrets.SMTP_USER }}' -var 'smtp_pass=${{ secrets.SMTP_PASS }}' -var 'head_metadata=${{ secrets.HEAD_METADATA }}'
      working-directory: deployments

